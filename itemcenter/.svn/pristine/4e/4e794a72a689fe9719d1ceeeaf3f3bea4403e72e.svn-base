package com.ve.itemcenter.core.manager.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.ve.itemcenter.common.constant.DBConst;
import com.ve.itemcenter.common.constant.ResCodeNum;
import com.ve.itemcenter.common.domain.GlobalPropertyDTO;
import com.ve.itemcenter.common.domain.GlobalPropertyQTO;
import com.ve.itemcenter.core.dao.GlobalPropertyDAO;
import com.ve.itemcenter.core.domain.GlobalPropertyDO;
import com.ve.itemcenter.core.exception.ItemException;
import com.ve.itemcenter.core.manager.GlobalPropertyManager;
import com.ve.itemcenter.core.util.ExceptionUtil;
import com.ve.itemcenter.core.util.ItemUtil;

@Service
public class GlobalPropertyManagerImpl implements GlobalPropertyManager {
	@Resource
	private GlobalPropertyDAO globalPropertyDAO;

	@Override
	public GlobalPropertyDTO addGlobalProperty(GlobalPropertyDTO globalPropertyDTO) throws ItemException {
		try {
			// 验证globalPropertyDTO内的属性
			if (!verifyGlobalPropertyDTOProperty(globalPropertyDTO)) {
				throw ExceptionUtil.getException(ResCodeNum.PARAM_E_INVALID, "globalPropertyDTO property incorrect");
			}
			GlobalPropertyDO globalPropertyDO = new GlobalPropertyDO();
			ItemUtil.copyProperties(globalPropertyDTO, globalPropertyDO);// DTO转DO
			long newInsertedId = globalPropertyDAO.addGlobalProperty(globalPropertyDO);// 新增的记录返回的ID
			globalPropertyDTO = getGlobalProperty(newInsertedId);// 新增加的记录对应的globalPropertyDO
			return globalPropertyDTO;
		} catch (Exception e) {
			throw new ItemException(ResCodeNum.SYS_E_DEFAULT_ERROR, e);
		}
	}

	@Override
	public boolean updateGlobalProperty(GlobalPropertyDTO globalPropertyDTO) throws ItemException {
		// 验证参数
		if (globalPropertyDTO.getId() == null) {
			throw ExceptionUtil.getException(ResCodeNum.PARAM_E_MISSING, "globalPropertyDTO is null");
		}
		if (!verifyGlobalPropertyDTOProperty(globalPropertyDTO)) {
			throw ExceptionUtil.getException(ResCodeNum.PARAM_E_INVALID, "globalPropertyDTO property incorrect");
		}
		GlobalPropertyDO globalPropertyDO = new GlobalPropertyDO();
		ItemUtil.copyProperties(globalPropertyDTO, globalPropertyDO);
		int num = globalPropertyDAO.updateGlobalProperty(globalPropertyDO);
		return num > 0 ? true : false;
	}

	@Override
	public GlobalPropertyDTO getGlobalProperty(long id) throws ItemException {
		GlobalPropertyDO globalPropertyDO = globalPropertyDAO.getGlobalProperty(id);
		if (globalPropertyDO == null) {
			throw ExceptionUtil.getException(ResCodeNum.BASE_PARAM_E_RECORD_NOT_EXIST, "Cannot find requested record");
		}
		GlobalPropertyDTO globalPropertyDTO = new GlobalPropertyDTO();
		ItemUtil.copyProperties(globalPropertyDO, globalPropertyDTO);
		return globalPropertyDTO;
	}

	@Override
	public boolean deleteGlobalProperty(long id) throws ItemException {
		// TODO 验证id

		GlobalPropertyDO globalPropertyDO = new GlobalPropertyDO();
		globalPropertyDO.setId(id);
		globalPropertyDO.setIsDeleted(DBConst.DELETED.getCode());
		int num = globalPropertyDAO.updateGlobalProperty(globalPropertyDO);
		return num > 0 ? true : false;
	}

	@Override
	public boolean verifyGlobalPropertyDTOProperty(GlobalPropertyDTO globalPropertyDTO) throws ItemException {
		// TODO 验证GlobalPropertyDTO字段属性
		return true;
	}

	public List<GlobalPropertyDTO> queryGlobalProperty(GlobalPropertyQTO globalPropertyQTO) throws ItemException {
		List<GlobalPropertyDO> list = globalPropertyDAO.queryGlobalProperty(globalPropertyQTO);
		List<GlobalPropertyDTO> globalPropertyDTOList = new ArrayList<GlobalPropertyDTO>();// 需要返回的DTO列表
		for (GlobalPropertyDO globalPropertyDO : list) {
			GlobalPropertyDTO dto = new GlobalPropertyDTO();
			ItemUtil.copyProperties(globalPropertyDO, dto);
			globalPropertyDTOList.add(dto);
		}
		return globalPropertyDTOList;
	}
}
