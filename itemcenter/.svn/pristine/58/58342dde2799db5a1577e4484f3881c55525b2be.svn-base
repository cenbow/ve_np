package com.ve.itemcenter.core.service.action.item;

import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.ve.itemcenter.common.api.ItemResponse;
import com.ve.itemcenter.common.constant.ResCodeNum;
import com.ve.itemcenter.common.domain.dto.ItemDTO;
import com.ve.itemcenter.common.domain.dto.ItemImageDTO;
import com.ve.itemcenter.common.domain.dto.ItemSkuDTO;
import com.ve.itemcenter.common.domain.qto.ItemImageQTO;
import com.ve.itemcenter.common.domain.qto.ItemSkuQTO;
import com.ve.itemcenter.core.exception.ItemException;
import com.ve.itemcenter.core.manager.ItemImageManager;
import com.ve.itemcenter.core.manager.ItemManager;
import com.ve.itemcenter.core.manager.ItemSkuManager;
import com.ve.itemcenter.core.service.ItemRequest;
import com.ve.itemcenter.core.service.RequestContext;
import com.ve.itemcenter.core.service.action.Action;
import com.ve.itemcenter.core.service.action.ActionEnum;
import com.ve.itemcenter.core.util.ResponseUtil;

/**
 * 查看商品Action
 * 
 * @author chen.huang
 *
 */

@Service
public class GetItemAction implements Action {
	private static final Logger log = LoggerFactory.getLogger(GetItemAction.class);
	@Resource
	private ItemManager itemManager;

	@Resource
	private ItemSkuManager itemSkuManager;

	@Resource
	private ItemImageManager itemImageManager;

	@Override
	public ItemResponse execute(RequestContext context) throws ItemException {
		ItemDTO itemDTO = null;
		ItemResponse response = null;
		ItemRequest request = context.getRequest();
		// 验证ID
		if (request.getLong("ID") == null) {
			return ResponseUtil.getErrorResponse(ResCodeNum.PARAM_E_MISSING, "itemID is missing");
		}
		if (request.getLong("sellerId") == null) {
			return ResponseUtil.getErrorResponse(ResCodeNum.PARAM_E_MISSING, "sellerId is missing");
		}
		Long itemId = request.getLong("ID");// 商品品牌ID
		Long sellerId = request.getLong("sellerId");// 供应商ID

		try {
			itemDTO = itemManager.getItem(itemId, sellerId);
			ItemSkuQTO itemSkuQTO = new ItemSkuQTO();
			itemSkuQTO.setItemId(itemId);
			itemSkuQTO.setSellerId(sellerId);
			// 获取ItemSku列表
			List<ItemSkuDTO> itemSkuDTOList = itemSkuManager.queryItemSku(itemSkuQTO);
			// 获取副图列表
			ItemImageQTO itemImageQTO = new ItemImageQTO();
			itemImageQTO.setItemId(itemId);
			itemImageQTO.setSupplierId(sellerId);
			List<ItemImageDTO> itemImageDTOList = itemImageManager.queryItemImage(itemImageQTO);

			itemDTO.setItemImageDTOList(itemImageDTOList);
			itemDTO.setItemSkuDTOList(itemSkuDTOList);
		} catch (ItemException e) {
			response = ResponseUtil.getErrorResponse(e.getErrorCode(), e.getMessage());
			log.error("do action:" + request.getCommand() + " occur Exception:" + e.getMessage(), e);
			return response;
		}
		response = ResponseUtil.getSuccessResponse(itemDTO);
		return response;
	}

	@Override
	public String getName() {
		return ActionEnum.GET_ITEM.getActionName();
	}
}
