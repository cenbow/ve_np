package com.ve.usercenter.core.manager.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.ve.usercenter.common.constant.ResponseCode;
import com.ve.usercenter.common.dto.SupplierExtraInfoDTO;
import com.ve.usercenter.common.dto.UserAuthInfoDTO;
import com.ve.usercenter.common.dto.UserDTO;
import com.ve.usercenter.common.dto.UserExtraInfoDTO;
import com.ve.usercenter.common.dto.UserInfoDTO;
import com.ve.usercenter.common.qto.UserQTO;
import com.ve.usercenter.core.dao.UserDao;
import com.ve.usercenter.core.domain.UserDO;
import com.ve.usercenter.core.exception.UserException;
import com.ve.usercenter.core.manager.ConsigneeManager;
import com.ve.usercenter.core.manager.SupplierExtraInfoManager;
import com.ve.usercenter.core.manager.UserAuthInfoManager;
import com.ve.usercenter.core.manager.UserBabyInfoManager;
import com.ve.usercenter.core.manager.UserExtraInfoManage;
import com.ve.usercenter.core.manager.UserManager;
import com.ve.usercenter.core.service.UserResponse;
import com.ve.usercenter.core.util.UserUtil;

@Service
public class UserManagerImpl implements UserManager {

	@Resource
	private UserDao userDao;

	@Resource
	private UserExtraInfoManage userExtraInfoManage;

	@Resource
	private SupplierExtraInfoManager supplierExtraManager;

	@Resource
	private UserBabyInfoManager userBabyInfoManager;

	@Resource
	private ConsigneeManager consigneeManager;

	@Resource
	private UserAuthInfoManager userAuthInfoManager;

	@Override
	public UserDTO addUser(UserDTO userDto) throws UserException {
		// TODO Auto-generated method stub

		UserResponse response = null;

		if (null == userDto) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"userDto is null");
		}

		// 判断用户的数据是否合法
		ResponseCode responseCode = UserUtil.userInfoIsLegal(userDto);

		if (null != responseCode) {
			throw new UserException(responseCode);
		}

		// 判断用户名是否被注册
		String name = userDto.getName();
		if (name != null) {

			if (null != getUserByName(name)) {
				throw new UserException(ResponseCode.B_ADD_ERROR,
						"username is already register");
			}
		}

		// 判断邮箱是否被注册
		String email = userDto.getEmail();
		if (null != email) {
			if (null != getUserByEmail(email)) {
				throw new UserException(ResponseCode.B_ADD_ERROR,
						"email is already register");
			}
		}

		// 判断手机是否被注册
		String mobile = userDto.getmPhoneNo();
		if (null != mobile) {

			if (null != getUserByMobile(mobile)) {
				throw new UserException(ResponseCode.B_ADD_ERROR,
						"phoneNo is already register");
			}
		}

		UserDO userDo = new UserDO();
		BeanUtils.copyProperties(userDto, userDo);
		Long userId = userDao.addUser(userDo);

		userDto = getUserById(userId);

		return userDto;
	}

	@Override
	public UserDTO getUserByName(String name) throws UserException {

		if (null == name) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"username is null");
		}
		UserDO userDo = userDao.getUserByName(name);
		UserDTO userDto = null;
		if (null != userDo) {
			userDto = new UserDTO();
			BeanUtils.copyProperties(userDo, userDto);
		}

		return userDto;
	}

	@Override
	public UserDTO getUserByEmail(String email) throws UserException {
		// TODO Auto-generated method stub
		if (null == email) {
			throw new UserException(ResponseCode.P_PARAM_NULL, "email is null");
		}
		UserDO userDo = userDao.getUserByEmail(email);
		UserDTO userDto = null;
		if (null != userDo) {
			userDto = new UserDTO();
			BeanUtils.copyProperties(userDo, userDto);
		}
		return userDto;
	}

	@Override
	public UserDTO getUserByMobile(String mobile) throws UserException {
		// TODO Auto-generated method stub
		if (null == mobile) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"phoneNo is null");
		}
		UserDO userDo = userDao.getUserByMobile(mobile);
		UserDTO userDto = null;
		if (null != userDo) {
			userDto = new UserDTO();
			BeanUtils.copyProperties(userDo, userDto);
		}
		return userDto;
	}

	@Override
	public UserDTO getUserById(Long userId) throws UserException {
		// TODO Auto-generated method stub
		if (null == userId) {
			throw new UserException(ResponseCode.P_PARAM_NULL, "userId is null");
		}

		if (userId < 0) {
			throw new UserException(ResponseCode.P_PARAM_ERROR,
					"userId must greater than zero");
		}

		UserDO userDo = userDao.getUserById(userId);
		UserDTO userDto = null;

		if (null != userDo) {
			userDto = new UserDTO();
			BeanUtils.copyProperties(userDo, userDto);
		}
		return userDto;
	}

	@Override
	public int updatePwd(Long userId, String oldPwd, String newPwd)
			throws UserException {

		if (null == newPwd) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"new password is null");
		}

		if (null == oldPwd) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"old password is null");
		}

		if (oldPwd.equals(newPwd)) {
			throw new UserException(ResponseCode.B_UPDATE_ERROR,
					"new password and old password is same");
		}

		if (!newPwd.matches("^[a-zA-Z0-9_]{8,20}$")) {
			throw new UserException(ResponseCode.P_PARAM_ERROR,
					"new password format is error");
		}

		UserDTO userDto = getUserById(userId);
		if (userDto == null) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user is not exist");
		}

		if (!userDto.getPassword().equals(oldPwd)) {
			throw new UserException(ResponseCode.B_UPDATE_ERROR,
					"old password is error");
		}

		int result = userDao.updatePwd(userId, newPwd);

		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}

		return result;
	}

	@Override
	public int updateEmail(Long userId, String email) throws UserException {
		// TODO Auto-generated method stub
		if (null == email) {
			throw new UserException(ResponseCode.P_PARAM_NULL, "email is null");
		}

		if (!email
				.matches("^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$")) {
			throw new UserException(ResponseCode.P_PARAM_ERROR,
					"email format error");
		}

		UserDTO userDto = getUserById(userId);

		int result = userDao.updateEmail(userId, email);

		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}

		return result;
	}

	@Override
	public int updateMobile(Long userId, String mobile) throws UserException {
		// TODO Auto-generated method stub

		if (null == mobile) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"phoneNo is null");
		}

		if (mobile.length() != 11) {
			throw new UserException(ResponseCode.P_PARAM_ERROR,
					"phoneNo formart is error");
		}

		UserDTO userDto = getUserById(userId);

		int result = userDao.updateMobile(userId, mobile);

		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}

		return result;
	}

	@Override
	public int activeUser(Long userId) throws UserException {
		// TODO Auto-generated method stub

		UserDTO userDto = getUserById(userId);

		if (null == userDto) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user not exist");
		}

		int result = userDao.activeUser(userId);
		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}

		return result;
	}

	@Override
	public int freezeUser(Long userId) throws UserException {

		UserDTO userDto = getUserById(userId);
		if (null == userDto) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user not exist");
		}

		int result = userDao.freezeUser(userId);
		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}

		return result;
	}

	@Override
	public int moveUser(Long userId) throws UserException {

		UserDTO userDto = getUserById(userId);

		if (null == userDto) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user not exist");
		}

		// 删除指定卖家账号的扩展信息
		if (userDto.getRole() == 2) {

			SupplierExtraInfoDTO supplierExtraInfoDto = supplierExtraManager
					.getSupplierExtraInfoByUserId(userId);
			if (supplierExtraInfoDto != null) {
				int result = supplierExtraManager
						.delSupplierExtraInfoByUserId(userId);
				if (result != 1) {
					throw new UserException(ResponseCode.B_DELETE_ERROR,
							"delete supplierExtraInfo error");
				}
			}
		}

		// 删除指定用户买家账号的扩展信息
		UserExtraInfoDTO userExtraDto = userExtraInfoManage
				.getUserExtraInfoByUserId(userId);

		if (userExtraDto != null) {

			int result = userExtraInfoManage
					.delUserExtraInfoByUserId(userExtraDto.getUserId());
			if (result != 1) {
				throw new UserException(ResponseCode.B_DELETE_ERROR,
						"delete userExtraInfo error");
			}
		}

		// 删除指定用户的baby的信息
		int babyCount = userBabyInfoManager.getBabyCountByUserId(userId);
		if (babyCount > 0) {
			int result = userBabyInfoManager.deleteUserAllBaby(userId);
			if (babyCount != result) {
				throw new UserException(ResponseCode.B_DELETE_ERROR,
						"delete userBaby error");
			}
		}

		// 删除指定用户的收货地址信息
		int consigneeCount = consigneeManager.getConsigneeCountByUserId(userId);
		if (consigneeCount > 0) {
			int result = consigneeManager.deleteUserConsignee(userId);
			if (consigneeCount != result) {
				throw new UserException(ResponseCode.B_DELETE_ERROR,
						"delete configneeInfo error");
			}
		}

		// 删除用户的实名认证消息
		UserAuthInfoDTO userAuthInfoDto = userAuthInfoManager
				.getAuthInfoByUserId(userId);
		if (userAuthInfoDto != null) {
			int result = userAuthInfoManager.deleteUserAuth(userId);
			if (result != 1) {
				throw new UserException(ResponseCode.B_DELETE_ERROR,
						"delete userAuthInfoDto error");
			}
		}

		int result = userDao.moveUser(userId);
		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}
		return result;
	}

	@Override
	public int deleteUser(Long userId) throws UserException {
		// TODO Auto-generated method stub

		UserDTO userDto = getUserById(userId);
		if (null == userDto) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user not exist");
		}
		// 如果用的状态不为2，既用户不在回收站中，则不能删除
		if (userDto.getDeleted() != 2) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user not exist");
		}

		int result = userDao.deleteUser(userId);
		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "delete error");
		}

		return result;
	}

	@Override
	public List<UserQTO> queryUser(UserQTO userQto) throws UserException {

		// 没传入页数或者传入的页数大余500，默认第0页
		if (null == userQto.getIndex() || userQto.getIndex() > 500) {
			userQto.setIndex(0);
		}

		// 没传入每页显示总数或者每页显示的数量大于500的话，默认每页显示20条
		if (null == userQto.getPageSize() || userQto.getPageSize() > 500) {
			userQto.setPageSize(20);
		}

		UserDO userDo = new UserDO();
		BeanUtils.copyProperties(userQto, userDo);

		// 传入的页数大于最大页数，则跳入第一页
		Long totalCount = userDao.getTotalCount(userDo);

		Long maxIndex = totalCount % userQto.getPageSize() == 0 ? totalCount
				/ userQto.getPageSize() : totalCount / userQto.getPageSize()
				+ 1;
		if (userQto.getIndex() > maxIndex) {
			userQto.setIndex(0);
		}

		List<UserDO> userDos = userDao.queryUser(userQto);

		List<UserQTO> userQtos = new ArrayList<UserQTO>();
		UserQTO userQto1 = null;
		if (userDos != null) {
			for (UserDO userDo1 : userDos) {
				userQto1 = new UserQTO();
				BeanUtils.copyProperties(userDo1, userQto1);
				userQto.setTotalCount(totalCount);
				userQtos.add(userQto);
			}
		}

		return userQtos;

	}

	@Override
	public int setUserRole(Long userId, Byte role) throws UserException {

		UserDTO userDto = getUserById(userId);
		if (null == userDto) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user not exist");
		}

		if (role.byteValue() != 0 && role.byteValue() != 1) {
			throw new UserException(ResponseCode.B_UPDATE_ERROR,
					"role value is error");
		}
		int result = userDao.setUserRole(userId, role);
		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}
		return result;
	}

	@Override
	public int restoreUser(Long userId) throws UserException {
		// TODO Auto-generated method stub

		UserDTO userDto = getRecycleUser(userId);
		if (null == userDto) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"user not exist");
		}

		// 如果用户不在回收站内，则不能还原
		if (userDto.getDeleted() != 2) {
			throw new UserException(ResponseCode.B_UPDATE_ERROR,
					"user not in recycle bin");
		}

		// 还原指定卖家账号的扩展信息
		supplierExtraManager.restoreSupplierExtraInfoByUserId(userId);
		// 还原指定用户买家账号的扩展信息
		userExtraInfoManage.restoreUserExtraInfoByUserId(userId);

		// 还原指定用户的baby的信息
		userBabyInfoManager.restoreUserAllBaby(userId);

		// 还原指定用户的收货地址信息
		consigneeManager.restoreUserConsignee(userId);

		// 还原用户的实名认证消息
		userAuthInfoManager.restoreUserAuth(userId);

		int result = userDao.restoreUser(userId);
		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}

		return result;
	}

	@Override
	public UserDTO getRecycleUser(Long userId) throws UserException {
		// TODO Auto-generated method stub
		if (null == userId) {
			throw new UserException(ResponseCode.P_PARAM_NULL, "userId is null");
		}

		if (userId < 0) {
			throw new UserException(ResponseCode.P_PARAM_ERROR,
					"userId must greater than zero");
		}

		UserDO userDo = userDao.getRecycleUser(userId);
		UserDTO userDto = null;

		if (null != userDo) {
			userDto = new UserDTO();
			BeanUtils.copyProperties(userDo, userDto);
		}
		return userDto;
	}

	@Override
	public UserDTO userLogin(String loginName, String loginPwd)
			throws UserException {
		// TODO Auto-generated method stub

		if (null == loginName) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"loginName is null");
		}

		if (null == loginPwd) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"loginPwd is null");
		}

		UserDO userDo = userDao.userLogin(loginName, loginPwd);

		if (null == userDo) {
			throw new UserException(ResponseCode.B_SELECT_ERROR,
					"loginName or loginPwd error");
		}

		UserDTO userDto = null;
		if (userDo != null) {
			userDto = new UserDTO();
			BeanUtils.copyProperties(userDo, userDto);
		}

		return userDto;
	}

	@Override
	public UserDTO apiUserLogin(UserInfoDTO userInfoDto) throws UserException {
		// TODO Auto-generated method stub

		if (null == userInfoDto) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"userInfoDto is null");
		}

		UserExtraInfoDTO userExtraInfoDto = new UserExtraInfoDTO();
		BeanUtils.copyProperties(userInfoDto, userExtraInfoDto);

		// 根据openId和authType查询用户扩张表中是否已存在
		UserExtraInfoDTO extraDto = userExtraInfoManage
				.getInfoByOpenIdAndAuthType(userExtraInfoDto);

		UserDTO userDto = new UserDTO();
		BeanUtils.copyProperties(userInfoDto, userDto);

		// 如果不存在指定的信息，则将用户信息和用户扩展信息添加进入
		if (extraDto == null) {

			userDto = addUser(userDto);
			userExtraInfoManage.addUserExtraInfo(extraDto);
		} else {
			userDto = getUserById(extraDto.getUserId());
			// 如果用户的用户名已经修改，更新数据
			if (userDto.getName() != userInfoDto.getName()) {
				updateName(extraDto.getUserId(), userInfoDto.getName());
			}
		}

		return userDto;
	}

	@Override
	public int updateName(Long userId, String name) throws UserException {
		// TODO Auto-generated method stub
		if (null == userId) {
			throw new UserException(ResponseCode.P_PARAM_NULL,
					"userInfoDto is null");
		}
		if (null == name) {
			throw new UserException(ResponseCode.P_PARAM_NULL, "name is null");
		}

		UserDTO userDto = getUserById(userId);

		int result = userDao.updateName(userId, name);

		if (result != 1) {
			throw new UserException(ResponseCode.B_DELETE_ERROR, "update error");
		}

		return result;
	}
}
