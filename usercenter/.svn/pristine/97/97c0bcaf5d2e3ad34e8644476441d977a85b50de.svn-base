package com.ve.usercenter.core.service.action.usergroup;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;

import com.ve.usercenter.common.action.ActionEnum;
import com.ve.usercenter.common.constant.ResponseCode;
import com.ve.usercenter.common.dto.UserGroupDTO;
import com.ve.usercenter.core.exception.UserException;
import com.ve.usercenter.core.manager.UserGroupManager;
import com.ve.usercenter.core.service.RequestContext;
import com.ve.usercenter.core.service.UserRequest;
import com.ve.usercenter.core.service.UserResponse;
import com.ve.usercenter.core.service.action.Action;

@Service
public class UpdateUserGroupAction implements Action {

	@Resource
	private UserGroupManager userGroupManager;

	@Resource
	TransactionTemplate transactionTemplate;

	@SuppressWarnings("rawtypes")
	@Override
	public UserResponse execute(final RequestContext context)
			throws UserException {

		@SuppressWarnings({ "unchecked", "unused" })
		UserResponse response = transactionTemplate
				.execute(new TransactionCallback() {

					@Override
					public Object doInTransaction(TransactionStatus status) {

						try {
							UserRequest userRequest = context.getRequest();
							UserGroupDTO userGroupDto = (UserGroupDTO) userRequest
									.getParam("userGroupDTO");

							if (null == userGroupDto) {
								throw new UserException(
										ResponseCode.P_PARAM_NULL,
										"userGroupDto is null");
							}

							// 最大积分值
							Long maxIntegral = userGroupDto.getMaxIntegral();

							// 当传入的最大积分值不为空，这需要验证需要修改的积分值是否符合规范
							if (maxIntegral != null) {
								// 根据组id，获取用户组
								UserGroupDTO queryUserGroupDto = userGroupManager
										.getUserGroup(userGroupDto.getId());

								// 查询指定用户组的上一等级的用户组，如果存在上一等级的用户组，则要将上一等级的最小积分值修改
								UserGroupDTO upUserGroupDto = userGroupManager
										.getUpUserGroup(queryUserGroupDto
												.getGroupNo());

								if (null != upUserGroupDto) {
									if (upUserGroupDto.getMaxIntegral() <= maxIntegral) {
										throw new UserException(
												ResponseCode.P_PARAM_ERROR,
												"maxIntegral greater than upGroup maxIntegral");
									}

									// 将传入的用户组的最大积分赋值给上一等级的最小积分
									upUserGroupDto.setMinIntegral(maxIntegral);
									// 修改上一组等级
									userGroupManager
											.updateUserGroup(upUserGroupDto);
								} else {

								}
							}
							userGroupManager.updateUserGroup(userGroupDto);
						} catch (UserException e) {
							log.error(e.getMessage(), e);
							status.setRollbackOnly();
							return new UserResponse(e.getResponseCode()
									.getCode(), e.getMessage());
						}
						return new UserResponse(true);
					}

				});
		return new UserResponse(true);
	}

	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return ActionEnum.UPDATE_USER_GROUP.getActionName();
	}

}
