package com.ve.usercenter.core.service.action.consignee;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;

import com.ve.usercenter.common.action.ActionEnum;
import com.ve.usercenter.common.constant.ResponseCode;
import com.ve.usercenter.common.dto.ConsigneeDTO;
import com.ve.usercenter.core.exception.UserException;
import com.ve.usercenter.core.manager.ConsigneeManager;
import com.ve.usercenter.core.service.RequestContext;
import com.ve.usercenter.core.service.UserRequest;
import com.ve.usercenter.core.service.UserResponse;
import com.ve.usercenter.core.service.action.Action;

@Service
public class SetDefConsigneeAction implements Action {

	@Resource
	private ConsigneeManager consigneeManager;

	@Resource
	TransactionTemplate transactionTemplate;

	@SuppressWarnings("unchecked")
	@Override
	public UserResponse execute(final RequestContext context)
			throws UserException {

		@SuppressWarnings("rawtypes")
		UserResponse response = transactionTemplate
				.execute(new TransactionCallback() {

					@Override
					public Object doInTransaction(TransactionStatus status) {

						UserRequest userRequest = context.getRequest();
						Long consigneeId = (Long) userRequest
								.getParam("consigneeId");// 收货地址id
						try {
							// 查询是否存在指定id对应的收货地址
							ConsigneeDTO consigneeDto = consigneeManager
									.getConsigneeById(consigneeId);
							if (null == consigneeDto) {
								throw new UserException(
										ResponseCode.B_UPDATE_ERROR,
										"consignee is not exist");
							}

							// 如果修改的收货地址为默认地址，则返回
							if (consigneeDto.getIsDefault() == true) {
								throw new UserException(
										ResponseCode.B_UPDATE_ERROR,
										"consignee is default");
							}

							Long userId = consigneeDto.getUserId();
							// 将指定用户的其他地址改为非默认
							consigneeManager.updateUserDefaultConsignee(userId);
							consigneeManager.setDefConsignee(consigneeId);

						} catch (UserException e) {
							log.error(e.getMessage(), e);
							status.setRollbackOnly();
							return new UserResponse(e.getResponseCode()
									.getCode(), e.getMessage());
						}
						return new UserResponse(true);

					}

				});

		return response;
	}

	@Override
	public String getName() {
		return ActionEnum.SET_DEFAULT_CONSIGNEE.getActionName();
	}

}
