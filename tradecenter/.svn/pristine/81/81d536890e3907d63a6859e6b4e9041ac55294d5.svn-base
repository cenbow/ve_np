package com.ve.tradecenter.core.service.action.order;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ve.tradecenter.common.api.Request;
import com.ve.tradecenter.common.api.TradeResponse;
import com.ve.tradecenter.common.constant.ResponseCode;
import com.ve.tradecenter.common.domain.OrderItemDTO;
import com.ve.tradecenter.core.constants.TradeConstants;
import com.ve.tradecenter.core.domain.DeliveryNoticeDO;
import com.ve.tradecenter.core.domain.DeliveryNoticeDTO;
import com.ve.tradecenter.core.domain.OrderDO;
import com.ve.tradecenter.core.domain.OrderItemDO;
import com.ve.tradecenter.core.exception.TradeException;
import com.ve.tradecenter.core.manager.DeliveryNoticeManager;
import com.ve.tradecenter.core.manager.OrderItemManager;
import com.ve.tradecenter.core.manager.OrderLogManager;
import com.ve.tradecenter.core.manager.OrderManager;
import com.ve.tradecenter.core.service.RequestContext;
import com.ve.tradecenter.core.service.ResponseUtils;
import com.ve.tradecenter.core.service.action.Action;
import com.ve.tradecenter.core.service.action.ActionEnum;
import com.ve.tradecenter.core.service.action.cart.AddCartItem;

/**
 * 整单发货
 * @author cwr
 */
public class DeliveryGoods implements Action {
	private static final Logger log = LoggerFactory.getLogger(AddCartItem.class);
	
	@Resource 
	private DeliveryNoticeManager deliveryNoticeManager;
	
	@Resource
	private OrderManager orderManager;	

	@Resource
	private OrderItemManager orderItemManager;
	
	@Resource
	private OrderLogManager orderLogManager;
	
	public TradeResponse<Boolean> execute(RequestContext context) throws TradeException {
		Request request = context.getRequest();
		TradeResponse<Boolean> response = null;
		if(request.getParam("deliveryNoticeDTO") == null){
			log.error("deliveryNoticeDTO is null");
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"deliveryNoticeDTO is null");
		}
		
		DeliveryNoticeDTO deliveryNoticeDTO = (DeliveryNoticeDTO)request.getParam("deliveryNoticeDTO");
		
		// 字段验证
		String errorMsg = deliveryNoticeManager.validateFields(deliveryNoticeDTO);
		if(!StringUtils.isEmpty(errorMsg)){
			log.error(errorMsg);
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,errorMsg); 
		}
		
		long orderId = deliveryNoticeDTO.getOrderId();
		long userId = deliveryNoticeDTO.getUserId();
		String express = deliveryNoticeDTO.getExpress();
		String expressNo =deliveryNoticeDTO.getExpressNo();
		String memo = deliveryNoticeDTO.getMemo();
		String operator = deliveryNoticeDTO.getOperator(); 
		
		// 已发货的商品明细
		List<OrderItemDTO> deliveriedItems = deliveryNoticeDTO.getOrderItems();
		List<OrderItemDO> allOrderItems = this.orderItemManager.getOrderItems(orderId, userId);
		
		boolean isPartialDelivery = false;
		List<Long> deliveriedItemId = new ArrayList<Long>(); 
		Date now =new Date();
		int orderItemResult = 0;
		for(OrderItemDTO item : deliveriedItems){
			long itemId = item.getId();
			int number  = item.getNumber();
			
			DeliveryNoticeDO notice = new DeliveryNoticeDO();
			notice.setDeliveryTime(now);
			notice.setIsArrival(false); 
			notice.setExpressNo(expressNo);
			notice.setExpress(deliveryNoticeDTO.getExpress());
			notice.setExpressId(deliveryNoticeDTO.getDeliveryId());
			notice.setOrderItemId(item.getId());
			notice.setUserId(deliveryNoticeDTO.getUserId());
			notice.setNumber(item.getNumber());
			notice.setExpress(express);
			
			// 写入发货单表
			this.deliveryNoticeManager.addDeliveryNotice(notice);
			int result = this.orderItemManager.deliveryOrderItem(itemId,userId);
			if(result > 0){
				orderItemResult ++;
			}
			deliveriedItemId.add(itemId);
		}
		for(OrderItemDO orderItem : allOrderItems){
			if(!deliveriedItemId.contains(orderItem)){
				isPartialDelivery = true;
				break;
			}
		}
		// 区分是全部发货还是部分发货
		int orderDeliveryStatus = isPartialDelivery ? TradeConstants.DeliveryStatus.PARTIAL_DELIVERIED : TradeConstants.DeliveryStatus.ALL_RECEIVAL;
		
		// 更新订单的状态   区分部分发货还是全部发货的状态
		OrderDO order =new OrderDO();
		order.setDeliveryStatus(orderDeliveryStatus);
		order.setGmtModified(now);
		
		int orderResult = this.orderManager.deliveryGoods(order);
		
		//TODO 写入订单操作日志
		String logMsg = TradeConstants.OrderLog.DELIVERIED + " " + express + " " + expressNo + " " + (memo==null ? "": memo);
		this.orderLogManager.addOrderLog(logMsg, now, orderId, userId, operator);
		boolean module = (orderResult>0) && (orderItemResult>0); // 同时有更新了order表和order_item表时才是成功
		if(module){
			response = ResponseUtils.getSuccessResponse(true);
		}else{
			log.error("updated failed");
			response = ResponseUtils.getFailResponse(ResponseCode.BIZ_E_RECORD_NOT_EXIST);
		}
		return response;
	}

	@Override
	public String getName() {
		return ActionEnum.DELIVERY_GOODS.getActionName();
	}
	
}
