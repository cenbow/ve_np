package com.ve.tradecenter.core.manager.impl;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.ve.tradecenter.common.constant.ErrorCode;
import com.ve.tradecenter.common.constant.ResponseCode;
import com.ve.tradecenter.common.domain.CartItemDTO;
import com.ve.tradecenter.core.dao.CartItemDao;
import com.ve.tradecenter.core.domain.CartItemDO;
import com.ve.tradecenter.core.exception.TradeException;
import com.ve.tradecenter.core.manager.CartItemManager;

public class CartItemManagerImpl implements CartItemManager {
	private static final Logger log = Logger.getLogger(CartItemManagerImpl.class);

	@Resource
	public CartItemDao cartItemDao;
	
	@Override
	public Long addCartItem(CartItemDO cartItemDO) throws TradeException{
		if(cartItemDO == null){
			throw new TradeException(ResponseCode.PARAM_E_PARAM_MISSING,"the cartItem is null");
		}
		Long result =0L;
		try{
			result = this.cartItemDao.addCartItem(cartItemDO);
		}catch(Exception e){
			throw new TradeException(ResponseCode.SYS_E_DATABASE_ERROR,e);
		}
		return result;
	}

	@Override
	public int deleteCartItem(Long id) throws TradeException {
		log.info("enter deleteCartItem : " + id);
		int result=0;
		try{
			result = this.cartItemDao.deleteCartItem(id);
		}catch(Exception e){
			throw new TradeException(ResponseCode.SYS_E_DATABASE_ERROR,e);
		}
		log.info("exit, delete num: " + result);
		return result;
	}
	
	@Override
	public int cleanCart(String sessionId) throws TradeException{
		log.info("enter cleanCart :" + sessionId);
		int result = 0;
		try{
			result = this.cartItemDao.cleanCart(sessionId);
		}catch(Exception e){
			throw new TradeException(ResponseCode.PARAM_E_PARAM_MISSING,e);
		}
		log.info("exit cleanCart: " + result);
		return result;
	}
	
	public int updateCartItem(CartItemDO cartItemDO)throws TradeException{
		log.info("enter updateCartItem  id : " + cartItemDO.getId() + " number : " +cartItemDO.getNumber());
		int result = 0;
		try{
			result = this.cartItemDao.updateCartItemNumber(cartItemDO);
		}catch(Exception e){
			throw new TradeException(ResponseCode.SYS_E_DATABASE_ERROR,e);
		}
		log.info("exit updateCartItem updated: " + result);
		return result;
	}

	@Override
	public List<CartItemDO> queryCartItems(String sessionId)throws TradeException{
		log.info("enter queryCartItems: " + sessionId);
		List<CartItemDO>  result =null;
		try{
			result =  this.cartItemDao.querytCartItems(sessionId);
		}catch(Exception e){
			throw new TradeException(ResponseCode.SYS_E_DATABASE_ERROR,e);
		}
		log.info("exit queryCartItems size: " + (result ==null ? 0 : result.size()));
		return result;
	}
	
	@Override
	public int deleteGiftItems(String sessionId)throws TradeException{
		log.info("enter deleteGiftItemsï¼š "+sessionId);
		int result = 0;
		try{
			result =  this.cartItemDao.deleteGiftItems(sessionId);
		}catch(Exception e){
			throw new TradeException(ResponseCode.SYS_E_DATABASE_ERROR,e);
		}
		log.info("exit deleteGiftItems :  " + result);
		return result;
	}
	
	@Override
	public String validateCartItemFields(CartItemDTO cartItem){
		if(cartItem.getNumber() == null){
			return "number is null";
		}else if(cartItem.getItemSkuId() == null){
			return "itemSkuId is null";
		}else if(cartItem.getSessionId() == null){
			return "sessionId is null";
		}else if(cartItem.getSupplierId() == null){
			return "supplierId is null";
		}
		return null;
	}
	
	@Override
	public int updateCartItemNumber(CartItemDO cartItem){
		int result = 0;
		result = this.cartItemDao.updateCartItemNumber(cartItem);
		return result;
	}


}
