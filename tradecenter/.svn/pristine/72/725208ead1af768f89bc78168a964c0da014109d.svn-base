package com.ve.tradecenter.core.service.action.order;


import java.util.Date;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ve.tradecenter.common.api.Request;
import com.ve.tradecenter.common.api.TradeResponse;
import com.ve.tradecenter.common.constant.ResponseCode;
import com.ve.tradecenter.core.constants.TradeConstants;
import com.ve.tradecenter.core.domain.OrderDO;
import com.ve.tradecenter.core.exception.TradeException;
import com.ve.tradecenter.core.manager.OrderLogManager;
import com.ve.tradecenter.core.manager.OrderManager;
import com.ve.tradecenter.core.service.RequestContext;
import com.ve.tradecenter.core.service.ResponseUtils;
import com.ve.tradecenter.core.service.action.Action;
import com.ve.tradecenter.core.service.action.ActionEnum;

/**
 * 退款成功处理类--标记订单的售后状态为已退款
 * @author cwr
 */
public class ConfirmRefund implements Action{
	private static final Logger log = LoggerFactory.getLogger(ConfirmRefund.class);
	
	@Resource
	private OrderManager orderManager ;
	
	@Resource
	private OrderLogManager orderLogManager;

	public TradeResponse<Boolean> execute(RequestContext context){
		Request request = context.getRequest();
		TradeResponse<Boolean> response = null;
		if(request.getParam("userId") == null ){
			log.error("userId is null");
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"userId is null");
		}else if(request.getParam("orderId") == null){
			log.error("orderId is null");
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"orderId is null");
		}
		
		long orderId = (Long) request.getParam("userId");
		long userId = (Long) request.getParam("orderId");
		
		// 退款操作人员
		String operator = request.getParam("operator")==null ? "客服" : (String)request.getParam("operator"); 
		OrderDO order;
		try {
			order = this.orderManager.getActiveOrder(orderId, userId);
		} catch (TradeException e) {
			log.error("db error :" + e);
			return ResponseUtils.getFailResponse(ResponseCode.SYS_E_DATABASE_ERROR);
		}
		if(order == null){
			log.error("order doesn't exist orderId:" +orderId + " userId:" + userId );
			return ResponseUtils.getFailResponse(ResponseCode.BIZ_E_RECORD_NOT_EXIST,"order doesn't exist");
		}
		
		int result=0;
		Date now = new Date();
		try{
			result = this.orderManager.refund(orderId, userId,now);
			long orderLogResult =this.orderLogManager.addOrderLog(TradeConstants.OrderLog.REFUND_SUCCESS, now, orderId, userId, operator);
		}catch(Exception e){
			log.error("db error :" + e);
			return ResponseUtils.getFailResponse(ResponseCode.SYS_E_DATABASE_ERROR);
		}
		if(result > 0){
			response = ResponseUtils.getSuccessResponse(true);
		}else{
			log.error("order doesn't exist");
			response = ResponseUtils.getFailResponse(ResponseCode.BIZ_E_RECORD_NOT_EXIST);
		}
		return response;
	}
	
	@Override
	public String getName() {
		return ActionEnum.CONFIRM_REFUND.getActionName();
	}

}
