package com.ve.tradecenter.core.service.action.order;


import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ve.tradecenter.common.api.Request;
import com.ve.tradecenter.common.api.TradeResponse;
import com.ve.tradecenter.common.constant.ResponseCode;
import com.ve.tradecenter.core.constants.TradeConstants;
import com.ve.tradecenter.core.domain.OrderDO;
import com.ve.tradecenter.core.exception.TradeException;
import com.ve.tradecenter.core.manager.OrderManager;
import com.ve.tradecenter.core.service.RequestContext;
import com.ve.tradecenter.core.service.ResponseUtils;
import com.ve.tradecenter.core.service.action.Action;
import com.ve.tradecenter.core.service.action.ActionEnum;

/**
 * 顾客申请退货--整单退货申请
 * @author cwr
 */
public class ReturnApply implements Action{
	private static final Logger log = LoggerFactory.getLogger(ReturnApply.class);
	
	@Resource
	private OrderManager orderManager;
	
	public TradeResponse<Boolean> execute(RequestContext context){
		
		Request request = context.getRequest();
		TradeResponse<Boolean> response = null;
		
		if(request.getParam("orderId") == null){
			log.error("orderId is null");
			response = ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"orderId is null");
		}else if(request.getParam("userId") == null){
			log.error("alipaymentDTO is null");
			return  ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"userId is null");
		}
		Long orderId = (Long)request.getParam("orderId");
		Long userId = (Long)request.getParam("userId");
		OrderDO order =null;
		try{
			order = this.orderManager.getActiveOrder(orderId, userId);
		}catch(TradeException e){
			log.error("db error:" + e);
			return ResponseUtils.getFailResponse(ResponseCode.SYS_E_DATABASE_ERROR);
		}
		if(order == null){
			log.error("order is null");
			return ResponseUtils.getFailResponse(ResponseCode.BIZ_E_RECORD_NOT_EXIST,"order not exist");
		}
		// 如果是订单已经结单 无法申请退货
		if(order.getOrderStatus() == TradeConstants.OrderStatus.FINISHED){
			log.error("order already finished ,cannot apply return");
			return ResponseUtils.getFailResponse(ResponseCode.BIZ_E_ORDER_STATUS_ERROR,"order finished,cannot apply return");
		}
		int result = 0;
		try{
			result = this.orderManager.returnApply(orderId, userId);
		}catch(TradeException e){
			log.error("DB operation error : " + e);
			return ResponseUtils.getFailResponse(e.getErrorCode());
		}
		boolean module = result > 0 ? true : false;
		response = ResponseUtils.getSuccessResponse(module);
		return response;
	}
	
	@Override
	public String getName() {
		return ActionEnum.DELETE_ORDER.getActionName();
	}
}
