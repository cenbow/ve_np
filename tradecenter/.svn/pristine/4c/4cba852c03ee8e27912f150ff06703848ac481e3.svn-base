package com.ve.tradecenter.core.service.action.order;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ve.tradecenter.common.api.Request;
import com.ve.tradecenter.common.constant.ResponseCode;
import com.ve.tradecenter.core.exception.TradeException;
import com.ve.tradecenter.core.manager.OrderManager;
import com.ve.tradecenter.core.service.RequestContext;
import com.ve.tradecenter.core.service.ResponseUtils;
import com.ve.tradecenter.core.service.TradeResponse;
import com.ve.tradecenter.core.service.action.Action;
import com.ve.tradecenter.core.service.action.ActionEnum;
import com.ve.tradecenter.core.service.action.cart.AddCartItem;
/**
 * 更新备注信息
 * @author cwr
 */
public class UpdateOrderMemo implements Action{
	private static final Logger log = LoggerFactory.getLogger(UpdateOrderMemo.class);
	
	@Resource 
	private OrderManager orderManager;

	public TradeResponse<Boolean> execute(RequestContext context) throws TradeException {
		Request request = context.getRequest();
		TradeResponse<Boolean> response = null;
		if(request.getParam("orderId") == null){
			log.error("orderId is null ");
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"orderId is null");
		}else if(request.getParam("userId") == null){
			log.error("userId is null");
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"userId is null");
		}else if(request.getParam("newMemo")==null){
			log.error("newMemo is null");
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"newMemo is null");
		}else if(request.getParam("memoType") == null){
			log.error("memoType is null");
			return ResponseUtils.getFailResponse(ResponseCode.PARAM_E_PARAM_MISSING,"memoType is null");
		}
		
		Long orderId = (Long) request.getParam("userId");
		Long userId = (Long) request.getParam("orderId");
		String newMemo = (String) request.getParam("newMemo");
		Integer memoType = (Integer)request.getParam("memoType");
		
		int result =0;
		try{
			result = this.orderManager.updateOrderMemo(orderId, userId, newMemo, memoType);
		}catch(TradeException e){
			log.error("db error : " + e);
			throw new TradeException(e.getErrorCode());
		}
		boolean module = result>0?true:false;
		if(module){
			response = ResponseUtils.getSuccessResponse(module);
		}else{
			log.error("updated failed ");
			response = ResponseUtils.getFailResponse(ResponseCode.BIZ_E_RECORD_NOT_EXIST);
		}
		return response;
	}
	
	@Override
	public String getName() {
		return ActionEnum.UPDATE_ORDER_MEMO.getActionName();
	}
}
