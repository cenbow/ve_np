package com.ve.deliverycenter.core.util.web;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.util.Assert;

import com.ve.deliverycenter.core.util.lang.StringUtil;

/**
 * 
 * @author dongdong
 *
 */
public final class DateUtils {

	private final static Log log = LogFactory.getLog(DateUtils.class);

	/**
	 * 日期的格式 精确到年：yyyy
	 */
	public static final String DATE_FORMATE_TO_YEAR = "yyyy";

	/**
	 * 日期格式 精确到秒 ：yyyyMMddHHmmss
	 */
	public static final String DATE_FORMDATE_TO_SECOND = "yyyyMMddHHmmss";

	/**
	 * 默认时间格式，精确到秒：
	 */
	public static final String DEFAULT_DATE_FORMATE = "yyyy-MM-dd HH:mm:ss";

	/**
	 * 将日期类型时间转换为14位数字类型yyyyMMddHHmmss
	 */
	public final static long date2Long(Date date) {
		if (date == null)
			return 0l;
		return Long.parseLong(new SimpleDateFormat(
				DateUtils.DATE_FORMDATE_TO_SECOND).format(date));
	}

	/**
	 * 将日期类型时间转换为8位数字类型yyyyMMdd
	 */
	public final static int date2Int(Date date) {
		if (date == null)
			return -1;
		return Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(date));
	}

	/**
	 * 日期型按格式转字符串
	 * 
	 * @param date
	 * @param pattern
	 * @return
	 */
	public final static String format(Date date, String pattern) {
		if (null == date || null == pattern)
			return "";
		return new SimpleDateFormat(pattern).format(date);
	}

	/**
	 * 将14位数字时间转换为yyyy-MM-dd HH:mm:ss String时间
	 */
	public final static String ymdhmsFormatS(Long l) {
		if (l == null || l.toString().length() != 14) {
			log.debug("Long date Error: " + l);
			return "";
		}
		String str = l.toString();
		return str.substring(0, 4) + "-" + str.substring(4, 6) + "-"
				+ str.substring(6, 8) + " " + str.substring(8, 10) + ":"
				+ str.substring(10, 12) + ":" + str.substring(12, 14);
	}

	/**
	 * 将14位数字时间转换为yyyy-MM-dd HH:mm String时间
	 */
	public final static String ymdhmFormatS(Long l) {
		if (l == null || l.toString().length() > 14) {
			log.debug("Long date Error: " + l);
			return "";
		}
		String str = l.toString();
		return str.substring(0, 4) + "-" + str.substring(4, 6) + "-"
				+ str.substring(6, 8) + " " + str.substring(8, 10) + ":"
				+ str.substring(10, 12);
	}

	/**
	 * 将14/8位数字时间转换为yyyy-MM-dd String时间
	 */
	public final static String ymdFormatS(Long l) {
		if (l == null || l.toString().length() < 8) {
			log.debug("Long date Error: " + l);
			return "";
		}
		String str = l.toString();
		return str.substring(0, 4) + "-" + str.substring(4, 6) + "-"
				+ str.substring(6, 8);
	}

	public final static String ymdFormatS(String l) {
		if (l == null || l.toString().length() < 8) {
			log.debug("Long date Error: " + l);
			return "";
		}
		String str = l.toString();
		return str.substring(0, 4) + "-" + str.substring(4, 6) + "-"
				+ str.substring(6, 8);
	}

	/**
	 * 将字符串时间转换为14位数字日期yyyy-MM-dd HH:mm:ss Long时间
	 */
	public final static Long ymdhmsFormatL(String str) {
		if (str == null || str.length() != 19)
			return null;
		String s = str.substring(0, 4) + str.substring(5, 7)
				+ str.substring(8, 10) + str.substring(11, 13)
				+ str.substring(14, 16) + str.substring(17, 19);
		return Long.valueOf(s);
	}

	/**
	 * 将yyyy-mm-dd 转化为16位的时间数字
	 */
	public final static Long ymdFormatL(String str) {
		if (str == null || str.length() != 10)
			return null;
		StringBuilder stime = new StringBuilder();
		stime.append(str.substring(0, 4)).append(str.substring(5, 7))
				.append(str.substring(8, 10)).append("000000");
		return Long.valueOf(stime.toString());
	}

	/**
	 * 将yyyy-mm-dd 转化为16位的时间数字 , 并加上235959
	 * 
	 * @param str
	 * @return
	 */
	public final static Long ymdFormatLDayEnd(String str) {
		Long time = ymdFormatL(str);
		if (time != null) {
			time = time + 235959;
		}
		return time;
	}

	/**
	 * 将yyyymmdd* 格式 取月日 -s 分隔符 08/29
	 */
	public static final String mdFormatS(String str) {
		return mdFormatS(str, "/");
	}

	public static final String mdFormatS(String str, String s) {
		if (null == str || str.length() < 8)
			return null;
		return str.substring(4, 6) + s + str.substring(6, 8);
	}

	/**
	 * 将日期转成12/28/2011的样式
	 * 
	 * @param str
	 * @param s
	 * @return
	 */
	public static final String mdFormatdmy(String str, String s) {
		if (null == str || str.length() < 8)
			return null;
		return str.substring(4, 6) + s + str.substring(6, 8) + s
				+ str.substring(0, 4);
	}

	/**
	 * @param time
	 *            当前时间 long
	 * @param day
	 *            跨越天数
	 * @return 跨天后的时间
	 */
	public final static Long getLastTime(Long time, int day) {
		String lasttime = DateUtils.ymdhmsFormatS(time);
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = df.parse(lasttime);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			log.error(e.getMessage(), e);
		}
		Calendar now = Calendar.getInstance();
		now.setTime(date);
		now.set(Calendar.DATE, now.get(Calendar.DATE) + day);
		Date lastdate = now.getTime();
		return date2Long(lastdate);
	}

	/**
	 * @param time
	 *            当前时间 减去指定的小时
	 * @param hour
	 *            小时
	 * @return 提前到指定小时的时间
	 */
	public final static Long getLastTimeReduceHour(Long time, int hour) {
		String lasttime = DateUtils.ymdhmsFormatS(time);
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = df.parse(lasttime);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			log.error(e.getMessage(), e);
		}
		Calendar now = Calendar.getInstance();
		now.setTime(date);
		now.set(Calendar.HOUR_OF_DAY, now.get(Calendar.HOUR_OF_DAY) - hour);
		Date lastdate = now.getTime();
		return date2Long(lastdate);
	}

	/**
	 * @param time
	 *            当前时间 加上指定的小时
	 * @param hour
	 *            小时
	 * @return 提前到指定小时的时间
	 */
	public final static Long getLastTimeAddHour(Long time, int hour) {
		String lasttime = DateUtils.ymdhmsFormatS(time);
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = df.parse(lasttime);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			log.error(e.getMessage(), e);
		}
		Calendar now = Calendar.getInstance();
		now.setTime(date);
		now.set(Calendar.HOUR_OF_DAY, now.get(Calendar.HOUR_OF_DAY) + hour);
		Date lastdate = now.getTime();
		return date2Long(lastdate);
	}

	/**
	 * @param time
	 *            当前时间 加上指定的分钟
	 * @param minute
	 *            分钟
	 * @return 提前到指定分钟的时间
	 */
	public final static Long getLastTimeAddMinute(Long time, int minute) {
		String lasttime = DateUtils.ymdhmsFormatS(time);
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = df.parse(lasttime);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			log.error(e.getMessage(), e);
		}
		Calendar now = Calendar.getInstance();
		now.setTime(date);
		now.set(Calendar.MINUTE, now.get(Calendar.MINUTE) + minute);
		Date lastdate = now.getTime();
		return date2Long(lastdate);
	}

	/**
	 * @param time
	 *            当前时间 long
	 * @param day
	 *            跨越天数
	 * @return 跨天后的时间
	 */
	public final static Long getMisTime(Long time, int mi) {
		String lasttime = DateUtils.ymdhmsFormatS(time);
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = df.parse(lasttime);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			log.error(e.getMessage(), e);
		}
		Calendar now = Calendar.getInstance();
		now.setTime(date);
		now.set(Calendar.MINUTE, now.get(Calendar.MINUTE) + mi);
		Date lastdate = now.getTime();
		return date2Long(lastdate);
	}

	/**
	 * 将14位数字时间转换为yyyy-MM-dd HH:mm String时间:精确到分钟
	 * 
	 * @author zhouhuajun 2011-03-24 10:59
	 * @param l
	 *            ：14位的时间
	 */
	public final static String ymdhmFormatM(Long l) {
		if (l == null || l.toString().length() != 14) {
			log.debug("Long date Error: " + l);
			return "";
		}
		String str = l.toString();
		return str.substring(0, 4) + "-" + str.substring(4, 6) + "-"
				+ str.substring(6, 8) + " " + str.substring(8, 10) + ":"
				+ str.substring(10, 12);
	}

	public static String getHms(Date date) {
		if (date == null)
			return "";
		return new SimpleDateFormat("HHmmss").format(date);

	}

	public static boolean varifyDate(String dateStr) {

		if (StringUtil.isBlank(dateStr))
			return false;
		if (dateStr.length() != 10)
			return false;
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		try {
			df.parse(dateStr);
		} catch (ParseException e) {
			return false;
		}
		return true;

	}

	public static Date long2Date(long time) {
		DateFormat df = new SimpleDateFormat(DateUtils.DATE_FORMDATE_TO_SECOND);
		Date date = null;
		try {
			date = df.parse(time + "");
		} catch (ParseException e) {
			log.error(e.getMessage(), e);
		}
		return date;
	}

	public static String getHm(Date date) {
		if (date == null)
			return "";
		return new SimpleDateFormat("yyyyMMddHHmm").format(date);
	}

	/**
	 * 用于返回指定日期格式的日期增加指定天数的日期
	 * 
	 * @author zhouhj 2011-08-15 10:21
	 * @param appDate
	 *            指定日期
	 * @param format
	 *            指定日期格式
	 * @param days
	 *            指定天数
	 * @return 指定日期格式的日期增加指定天数的日期
	 */
	public static Date getFutureDayInDays(String appDate, String format,
			int days) throws Exception {
		if (StringUtil.isBlank(appDate) || StringUtil.isBlank(format)) {
			if (log.isDebugEnabled()) {
				log.debug("method getFutureDayInDays parms null");
			}
			throw new Exception("parm null");
		}
		try {
			Calendar calendar = GregorianCalendar.getInstance();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
			Date date = simpleDateFormat.parse(appDate);
			calendar.setTime(date);
			calendar.add(Calendar.DATE, days);
			date = calendar.getTime();
			return date;
		} catch (Exception e) {
			throw new Exception("method getFutureDayInDays error", e);
		}
	}

	/**
	 * 用于返回指定日期格式的日期增加指定天数的日期
	 * 
	 * @param date
	 * @param days
	 * @return
	 */
	public static Date getFutureDayInDays(Date date, int days) {
		Assert.notNull(date);
		Calendar calendar = GregorianCalendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DATE, days);
		return calendar.getTime();
	}

	/**
	 * 重载上面的方法，今天的days天数后的时间
	 * 
	 * @author zhouhj 2011-08-15 10:21
	 * @param appDate
	 *            指定日期
	 * @param format
	 *            指定日期格式
	 * @param days
	 *            指定天数
	 * @return 指定日期格式的日期增加指定天数的日期
	 */
	public static Date getFutureDayInDays(String format, int days)
			throws Exception {
		if (StringUtil.isBlank(format)) {
			if (log.isDebugEnabled()) {
				log.debug("method getFutureDayInDays parms null");
			}
			throw new Exception("param null");
		}
		try {
			Calendar calendar = GregorianCalendar.getInstance();
			Date date = calendar.getTime();
			calendar.setTime(date);
			calendar.add(Calendar.DATE, days);
			date = calendar.getTime();
			return date;
		} catch (Exception e) {
			throw new Exception("method getFutureDayInDays error", e);
		}
	}

	/**
	 * 用于返回指定日期格式的日期增加指定月数的日期
	 * 
	 * @author zhouhj 2011-08-15 10:25
	 * @param appDate
	 *            指定日期
	 * @param format
	 *            指定日期格式
	 * @param months
	 *            指定天数
	 * @return 指定日期格式的日期增加指定天数的日期
	 */
	public static Date getFutureDayInMonth(String appDate, String format,
			int months) throws Exception {
		if (StringUtil.isBlank(format)) {
			if (log.isDebugEnabled()) {
				log.debug("method getFutureDayInDays param null");
			}
			throw new Exception("param null");
		}
		try {
			Calendar calendar = GregorianCalendar.getInstance();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
			Date date = simpleDateFormat.parse(appDate);
			calendar.setTime(date);
			calendar.add(Calendar.MONTH, months);
			date = calendar.getTime();
			return date;
		} catch (Exception e) {
			throw new Exception("method getFutureDayInMonth error", e);
		}
	}

	/**
	 * 重载上面getFutureDayInMonth的方法，得到今天months月后的时间
	 * 
	 * @author zhouhj 2011-08-15 10:25
	 * @param appDate
	 *            指定日期
	 * @param format
	 *            指定日期格式
	 * @param months
	 *            指定天数
	 * @return 指定日期格式的日期增加指定天数的日期
	 */
	public static Date getFutureDayInMonth(String format, int months)
			throws Exception {
		if (StringUtil.isBlank(format)) {
			if (log.isDebugEnabled()) {
				log.debug("method getFutureDayInDays parms null");
			}
			throw new Exception("param null");
		}
		try {
			Calendar calendar = GregorianCalendar.getInstance();
			Date date = calendar.getTime();
			calendar.setTime(date);
			calendar.add(Calendar.MONTH, months);
			return calendar.getTime();
		} catch (Exception e) {
			throw new Exception("method getFutureDayInMonth error", e);
		}
	}

	/**
	 * 获取当前时间（字符串）
	 * 
	 * @param format
	 *            时间格式
	 * @return
	 */
	public static String getToday(String format) {
		try {
			SimpleDateFormat df = null;
			if (null == format) {
				df = new SimpleDateFormat("yyyy-MM-dd");
			} else {
				df = new SimpleDateFormat(format);
			}
			return df.format(new Date());
		} catch (Exception e) {
			return "";
		}
	}

	/**
	 * 获取当前时间之后（之前）的日期
	 * 
	 * @param days
	 *            天数
	 * @return 指定日期格式的日期增加指定天数的日期
	 */
	public static Date getFutureDayInDays(int days) {
		try {
			Calendar calendar = GregorianCalendar.getInstance();
			Date date = calendar.getTime();
			calendar.setTime(date);
			calendar.add(Calendar.DAY_OF_MONTH, days);
			return calendar.getTime();
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 得到想减后的年 <li>如果reduceYear传进来是2，如果是在2011年，那么返回去的年应该是2009年<li>
	 * 
	 * @param reduceYear
	 *            想减年的个数
	 * @return 得到想减后的年份
	 */
	public static int getReduceYear(int reduceYear) {
		try {
			Calendar calendar = GregorianCalendar.getInstance();
			Date date = calendar.getTime();
			calendar.setTime(date);
			calendar.add(Calendar.YEAR, -reduceYear);
			return Integer.parseInt(DateUtils.format(calendar.getTime(),
					DateUtils.DATE_FORMATE_TO_YEAR));
		} catch (Exception e) {
			return 0;
		}
	}

	/**
	 * 得到两个日期想减后的天数. <li>公式：传进来的日期-现在的日期</li> <li>日期的格式：yyyyMMddHHmmss</li>
	 * 
	 * @param endDate
	 *            传进来的日期
	 * @return 两个日期想减后的天数
	 */
	public static int getReduceDay(String endDate) {
		if (StringUtil.isBlank(endDate)) {
			return 0;
		}
		try {
			Date date = new Date();
			String formdateDate = DateUtils.format(date,
					DateUtils.DATE_FORMDATE_TO_SECOND);
			SimpleDateFormat df = new SimpleDateFormat(
					DateUtils.DATE_FORMDATE_TO_SECOND);
			// 两天相差的豪秒数
			long dif = df.parse(endDate).getTime()
					- df.parse(formdateDate).getTime();
			// 最后把豪秒换算成天
			return (int) (dif / (24 * 3600000));
		} catch (ParseException e) {
			e.printStackTrace();
			return 0;
		}
	}

	/**
	 * 得到两个日期想减后的分钟数
	 * 
	 * @param startDate
	 *            相减的时间
	 * @param endDate
	 *            被相减的时间.
	 * @return 两个日期想减后的分
	 */
	public static Long getReduceMinute(Long startDate, Long endDate) {
		try {
			SimpleDateFormat df = new SimpleDateFormat(
					DateUtils.DATE_FORMDATE_TO_SECOND);
			// 两天相差的豪秒数
			long dif = df.parse(String.valueOf(startDate)).getTime()
					- df.parse(String.valueOf(endDate)).getTime();
			// 最后把豪秒换算成分
			return (dif / (1000 * 60));
		} catch (ParseException e) {
			e.printStackTrace();
			return 0L;
		}
	}

	/**
	 * 得到两个日期想减后的分钟数
	 * 
	 * @param startDate
	 *            相减的时间
	 * @param endDate
	 *            被相减的时间.
	 * @return 两个日期想减后的分
	 */
	public static Long getReduceHour(Long startDate, Long endDate) {
		try {
			SimpleDateFormat df = new SimpleDateFormat(
					DateUtils.DATE_FORMDATE_TO_SECOND);
			// 两天相差的豪秒数
			long dif = df.parse(String.valueOf(startDate)).getTime()
					- df.parse(String.valueOf(endDate)).getTime();
			// 最后把豪秒换算成分
			return (dif / (1000 * 3600));
		} catch (ParseException e) {
			e.printStackTrace();
			return 0L;
		}
	}

	/**
	 * 得到两个日期想减后的天数
	 * 
	 * @param reduceDate
	 *            想减的时间
	 * @param byReduceDate
	 *            被想减的时间.
	 * @return 两个日期想减后的天数
	 */
	public static Long getReduceDay(Long reduceDate, Long byReduceDate) {
		try {
			SimpleDateFormat df = new SimpleDateFormat(
					DateUtils.DATE_FORMDATE_TO_SECOND);
			// 两天相差的豪秒数
			long dif = df.parse(String.valueOf(reduceDate)).getTime()
					- df.parse(String.valueOf(byReduceDate)).getTime();
			// 最后把豪秒换算成天
			return (dif / (1000 * 3600 * 24));
		} catch (ParseException e) {
			e.printStackTrace();
			return 0L;
		}
	}

	/**
	 * 获得当前星期
	 * 
	 * @return
	 */
	public static String getWeek() {
		Calendar c = Calendar.getInstance();
		String[] weeks = new String[] { "日", "一", "二", "三", "四", "五", "六" };
		int weekNum = c.get(Calendar.DAY_OF_WEEK) - 1;
		return weeks[weekNum];
	}

	/**
	 * 计算两个时间相减得到的天数 传如参数必须为(yyyy-MM-dd HH:mm:ss)格式。
	 * 
	 * @param args
	 */
	public static String getDays(String starDate, String endDate) {

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			Date date1 = sdf.parse(starDate);
			Date date2 = sdf.parse(endDate);
			long day = (date1.getTime() - date2.getTime())
					/ (24 * 60 * 60 * 1000) > 0 ? (date1.getTime() - date2
					.getTime()) / (24 * 60 * 60 * 1000)
					: (date2.getTime() - date1.getTime())
							/ (24 * 60 * 60 * 1000);
			return String.valueOf(day);

		} catch (ParseException e) {
			log.error(e.getMessage(), e);
			return "";

		}

	}

	/**
	 * @param timeLong
	 *            Sets this <code>Date</code> object to represent a point in
	 *            time that is <code>time</code> milliseconds after January 1,
	 *            1970 00:00:00 GMT.
	 * @return yyyy-MM-dd HH:mm:ss 格式的时间
	 */
	public static String getDateLong2String(Long timeLong) {

		Date date = new Date();
		date.setTime(timeLong);
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return df.format(date);
	}

	/**
	 * 判断当前时间减去参数时间，获取到分值
	 * 
	 * @param endDate
	 * @return
	 */
	public static long getMintues(Date endDate) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			Date currentDate = sdf.parse(getToday("yyyy-MM-dd HH:mm:ss"));
			long minutes = (currentDate.getTime() - endDate.getTime())
					/ (60 * 1000);
			return minutes;
		} catch (ParseException e) {
			e.printStackTrace();
			return 1l;
		}
	}

	/**
	 * 判断日期是否在指定的时间段内
	 * 
	 * @param startDate
	 *            开始时间
	 * @param endDate
	 *            结束时间
	 * @return true 在有效的时间段内 false不在有效的时间段内
	 */
	public static boolean isDateEffecRange(Date startDate, Date endDate) {
		Date newDate = new Date();
		boolean isEffect = false;
		if (newDate.after(startDate) && newDate.before(endDate)) {
			isEffect = true;
		}
		return isEffect;
	}

	public static void main(String[] args) {
		Long ss = 20110529235554L;
		Long ee = 20110529125554L;
		System.out.println(DateUtils.getReduceHour(ss, ee));
		Long now = DateUtils.date2Long(new Date());
		System.out.println(now);
	}

	/**
	 * 日期型按格式转字符串
	 * 
	 * @param date
	 * @param pattern
	 * @return
	 */
	public final static Date toDate(String dateStr, String pattern) {
		if (StringUtil.isEmpty(dateStr) || StringUtil.isEmpty(pattern))
			return null;
		try {
			SimpleDateFormat format = new SimpleDateFormat(pattern);
			return format.parse(dateStr);
		} catch (Exception ex) {
			return null;
		}
	}

	/**
	 * 获取默认格式yyyy-MM-dd hh:mm:ss的时间字符串
	 * 
	 * @author zhouhj 2012-03-14
	 * @param date
	 * @return
	 */
	public final static String getDefaultFormatTime(Date date) {
		return format(date, DEFAULT_DATE_FORMATE);
	}

	public final static Date addHour(Date pDate, int hour) {
		Calendar c = Calendar.getInstance();
		c.setTime(pDate);
		c.set(Calendar.HOUR_OF_DAY, c.get(Calendar.HOUR_OF_DAY) + hour);
		return c.getTime();
	}

	public final static Date addDay(Date pDate, int day) {
		Calendar c = Calendar.getInstance();
		c.setTime(pDate);
		c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH) + day);
		return c.getTime();
	}

	public final static String getBit(int a, int bit) {
		String b = "0000000000000" + a;
		return b.substring(b.length() - bit);
	}
}
